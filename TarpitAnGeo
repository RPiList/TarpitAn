import java.io.File
import java.io.FileWriter
import java.io.IOException
import java.io.InputStream
import javax.swing.JOptionPane.showMessageDialog

val Liste1 = mutableListOf<String>()
val Liste2 = mutableListOf<String>()
val Liste3 = mutableListOf<String>()
val Liste4 = mutableListOf<String>()
val ListeConfig = mutableListOf<String>()
var wertDECip: String = ""
val path = System.getProperty("user.dir")
var longlat = "6.68504,51.19807"
var fileName = "ip-locations.txt"
var fileName2 = "data.txt"
var fileName3 = "maps.kml"
var fileName4 = "result.txt"
val fileconfig = "config.txt"

fun main() {

    val fileconf = File(fileconfig)
    val fileconfExists = fileconf.exists()

    if (fileconfExists) {
        val inputStream99: InputStream = File(path + "\\config.txt").inputStream()
        inputStream99.bufferedReader().forEachLine { ListeConfig.add(it) }
        fileName = ListeConfig.elementAt(0)
        fileName2 = ListeConfig.elementAt(1)
        fileName3 = ListeConfig.elementAt(2)
        fileName4 = ListeConfig.elementAt(3)
        longlat = ListeConfig.elementAt(4)
    }
    else {
        fileName = "ip-locations.txt"
        fileName2 = "data.txt"
        fileName3 = "maps.kml"
        fileName4 = "result.txt"
        longlat = "6.68504,51.19807"
    }
    val inputStream2: InputStream = File(path + "\\" + fileName).inputStream()
    inputStream2.bufferedReader().forEachLine { Liste1.add(it) }

    val inputStream: InputStream = File(path + "\\" + fileName2).inputStream()
    inputStream.bufferedReader().forEachLine { Liste2.add(it) }

    prepareDECip()
    createKML()

    showMessageDialog(null, "Fertig.")
}

fun prepareDECip() {
    for (line in Liste2) {
        val pos1  = line.indexOf(",",0)
        val pos2  = line.indexOf(",",((pos1)+1))
        val pos3  = line.indexOf(",",((pos2)+1))
        wertDECip = line.substring(pos2+1, pos3)
        Liste3.add(wertDECip)
    }
    Liste4.addAll(Liste3.distinct())
}

fun createKML() {
    var decip: Double
    var neutext: String
    var neutextKML: String

    dateikopf()

    for(line in Liste4){

        decip = line.toDouble()

        for (line in Liste1) {
            val pos1  = line.indexOf(",",0)
            val pos2  = line.indexOf(",",((pos1)+1))
            val pos3  = line.indexOf(",",((pos2)+1))
            val pos4  = line.indexOf(",",((pos3)+1))
            val pos5  = line.indexOf(",",((pos4)+1))
            val pos6  = line.indexOf(",",((pos5)+1))
            val pos7  = line.indexOf(",",((pos6)+1))

            val wert1: String = line.substring(0,pos1)
            val wert2: String = line.substring(pos1+1, pos2)
            val wert6: String = line.substring(pos5+1, pos6)
            val wert7: String = line.substring(pos6+1, pos7)
            val wert8: String = line.substring(pos7+1)

            val Cwert1: Double = wert1.toDouble()
            val Cwert2: Double = wert2.toDouble()

            if (decip >= Cwert1 && decip <= Cwert2) {

                neutextKML = "<Placemark>" +
                        "<name>" + wert6 + "</name>" + "<extrude>1</extrude>" +
                        "<tessellate>1</tessellate><styleUrl>#transBluePoly</styleUrl><LineString>" +
                        "<coordinates>" + wert8 + "," + wert7 + System.getProperty("line.separator")  + longlat + "</coordinates></LineString></Placemark>"
                try {
                    val fw = FileWriter(path + "\\" + fileName3, true)
                    fw.write(neutextKML)
                    fw.close()
                } catch (e: IOException) {
                }
                break
            }
        }
    }

    neutext = "</Document></kml>"
    try {
        val fw = FileWriter(path + "\\" + fileName3, true)
        fw.write(neutext)
        fw.close()
    } catch (e: IOException) {
    }
}


fun dateikopf() {
    val kopftext = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <kml xmlns=\"http://www.opengis.net/kml/2.2\"><Document><Style id=\"transBluePoly\"><LineStyle><width>1.5</width><color>501400E6</color></LineStyle></Style>"
    try {
        val fw = FileWriter(path + "\\" + fileName3, true)
        fw.write(kopftext)
        fw.close()
    } catch (e: IOException) {
    }
}
